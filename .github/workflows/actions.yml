name: CI

on:
  push:
    branches: [dev]
  pull_request:
    branches: [release, main]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT }}
  GCP_ZONE: europe   # TODO: update to cluster zone
  IMAGE: alpine_main

jobs:
  Setup-build-publish:
    name: Setup, Build, Push
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      # Get tags
      - name: Fetching tags
        if: ${{ github.ref == 'refs/heads/main' ||  github.ref == 'refs/heads/release' }}
        run: git fetch --tags

      # Setup gcloud CLI
      - uses:  google-github-actions/setup-gcloud@v0.2.0
        with:
          service_account_key: ${{ secrets.GCP_ARTIFACT_REGISTERY_KEY }}
          project_id: ${{ secrets.GCP_PROJECT }}

      # Configure docker to use the gcloud command-line tool as a credential helper
      - name: auth docker
        run: |
          gcloud auth configure-docker -q

      #debug
      - name: current ref
        run: echo ${{ github.ref_name }}

      # Get image prefix
      - name: Image tag dev
        if: ${{ github.ref == 'refs/heads/dev' }}
        run: echo "IMAGE_TAG=dev-$(date +'%s')" >> $GITHUB_ENV

      - name: Image tag release
        if: ${{ github.ref == 'refs/heads/releasse' }}
        run: echo "IMAGE_TAG=$((git tag | egrep rc-[0-9] || echo rc-0 ) | sort --version-sort -r | tail -n1 | awk -F 'rc-' '{ print "rc-" $2 +1}')" >> $GITHUB_ENV

      - name: Image tag version
        if: ${{ github.ref == 'refs/heads/main' }}
        run: echo "$IMAGE_TAG=((git tag | egrep v[0-9]\.[0-9]\.[0-9] || echo v1.0.-1 ) | sort --version-sort -r | tail -n1 | awk -F. -v OFS=. '{$NF++;print}')" >> $GITHUB_ENV

      # Build the Docker image
      - name: Build
        run: |-
          docker build \
            --tag "gcr.io/$PROJECT_ID/$IMAGE:$IMAGE_TAG" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" \
            .

      # After successful build add tag
      - name: Update release number
        if: ${{ github.ref == 'refs/heads/main' ||  github.ref == 'refs/heads/release' }}
        run: |-
          git tag $IMAGE_TAG && git push --tags

      # Push the Docker image to Google Container Registry
      - name: Publish
        run: |-
          docker push "gcr.io/$PROJECT_ID/$IMAGE:$IMAGE_TAG"