# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the main branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Set up secrets in your workspace: GKE_PROJECT with the name of the project and GKE_SA_KEY with the Base64 encoded JSON service account key (https://github.com/GoogleCloudPlatform/github-actions/tree/docs/service-account-key/setup-gcloud#inputs).
#
# 3. Change the values for the GKE_ZONE, GKE_CLUSTER, IMAGE, and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke

name: Build and Deploy to GKE

on:
  push:
    branches:
      - dev

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT }}
  GCP_ZONE: europe   # TODO: update to cluster zone
  IMAGE: alpine_main
  REPOSITORY: test
  ACCOUNT: artifact-registry@valid-volt-331607.iam.gserviceaccount.com


jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Push
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        service_account_key: ${{ secrets.GCP_ARTIFACT_REGISTERY_KEY }}
        project_id: ${{ secrets.GCP_PROJECT }}

    # Configure Docker to use the gcloud command-line tool as a credential
    # helper for authentication
    - run: |-
        echo "${{ secrets.GCP_ARTIFACT_REGISTERY_KEY }}" >/tmp/gcp_key.json
    - run: |-
        gcloud auth activate-service-account $ACCOUNT --key-file=${{ secrets.GCP_ARTIFACT_REGISTERY_KEY }}
    - run: |-
        gcloud --quiet auth configure-docker $GCP_ZONE-docker.pkg.dev

    # Get current timestamp
    - name: Timestamp
      id: timestamp
      run: echo "::set-output name=timestamp::$(date +'%s')"

    # Build the Docker image
    - name: Build
      run: |-
        docker build \
          --tag "gcr.io/$PROJECT_ID/$REPOSITORY/$IMAGE:dev-${{ steps.timestamp.outputs.timestamp }}" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .

    # Push the Docker image to Google Container Registry
    - name: Publish
      run: |-
        docker push "gcr.io/$PROJECT_ID/$REPOSITORY/$IMAGE:dev-${{ steps.timestamp.outputs.timestamp }}"
